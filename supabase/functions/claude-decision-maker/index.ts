
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const anthropicApiKey = Deno.env.get('ANTHROPIC_API_KEY');

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { 
      dilemma, 
      criteria = [], 
      realTimeData = null,
      workspaceData = null,
      model = 'claude-sonnet-4-20250514'
    } = await req.json();

    if (!anthropicApiKey) {
      console.error('‚ùå ANTHROPIC_API_KEY not found in environment');
      throw new Error('Cl√© API Anthropic non configur√©e');
    }

    // Corriger la v√©rification du format de la cl√© API pour accepter les nouveaux formats
    if (!anthropicApiKey.startsWith('sk-ant-api03-') && !anthropicApiKey.startsWith('sk-ant-')) {
      console.error('‚ùå Invalid API key format. Anthropic keys should start with sk-ant-api03- or sk-ant-');
      throw new Error('Format de cl√© API Anthropic invalide');
    }

    console.log(`ü§ñ Using Claude model: ${model}`);
    console.log(`üîë API Key format: ${anthropicApiKey.substring(0, 10)}...`);

    // D√©tecter le type de question
    const dilemmaLower = dilemma.toLowerCase();
    const isFactual = /qui\s+(est|a|sont)|qu'est-ce\s+(que|qui)|comment\s+|pourquoi\s+|quelle?\s+est|combien\s+|d√©finition\s+de|expliquer\s+|what\s+is|who\s+is|how\s+|why\s+/.test(dilemmaLower);
    const isComparative = /choisir|meilleur|mieux|pr√©f√©rer|comparer|versus|ou\s+|alternative|option|choix|s√©lectionner|recommander|conseiller|quel|quelle|lequel|entre|diff√©rence|choose|better|best|prefer|compare|vs|or|alternative|option|choice|select|recommend|which|between|difference/.test(dilemmaLower);

    // Construction du prompt syst√®me am√©lior√©
    let systemPrompt = `Tu es un assistant expert en prise de d√©cision avec acc√®s aux informations les plus r√©centes.

R√àGLES IMPORTANTES:
1. Si la question est COMPARATIVE (choix entre plusieurs options), g√©n√®re EXACTEMENT 4 options diff√©rentes dans le breakdown
2. Si la question est FACTUELLE (une seule r√©ponse correcte), g√©n√®re 1 seule option dans le breakdown
3. Les scores doivent √™tre diff√©rents et r√©alistes (entre 65-90 pour les comparatives, 90-100 pour les factuelles)
4. Chaque option doit avoir des pros et cons sp√©cifiques et pertinents
5. Base ton analyse sur les crit√®res fournis

D√âTECTION DE TYPE:
- Question d√©tect√©e comme: ${isFactual ? 'FACTUELLE' : (isComparative ? 'COMPARATIVE' : 'COMPARATIVE par d√©faut')}
- ${isFactual ? 'Fournis UNE r√©ponse pr√©cise et factuelle' : 'Fournis QUATRE options diff√©rentes avec analyse comparative'}

Tu dois r√©pondre EXCLUSIVEMENT en JSON valide, sans texte avant ou apr√®s. Le format EXACT attendu est:
{
  "recommendation": "Titre de la recommandation principale",
  "description": "Description d√©taill√©e avec justification",
  "breakdown": [
    {
      "option": "Nom de l'option",
      "pros": ["Avantage 1", "Avantage 2", "Avantage 3"],
      "cons": ["Inconv√©nient 1", "Inconv√©nient 2"],
      "score": 85
    }${isFactual ? '' : `,
    {
      "option": "Nom de l'option 2",
      "pros": ["Avantage 1", "Avantage 2"],
      "cons": ["Inconv√©nient 1", "Inconv√©nient 2"],
      "score": 80
    },
    {
      "option": "Nom de l'option 3",
      "pros": ["Avantage 1", "Avantage 2"],
      "cons": ["Inconv√©nient 1", "Inconv√©nient 2"],
      "score": 75
    },
    {
      "option": "Nom de l'option 4",
      "pros": ["Avantage 1", "Avantage 2"],
      "cons": ["Inconv√©nient 1", "Inconv√©nient 2"],
      "score": 70
    }`}
  ]
}`;

    // Ajout des donn√©es temps r√©el si disponibles
    if (realTimeData?.content) {
      systemPrompt += `\n\nDonn√©es temps r√©el disponibles:
${realTimeData.content}
Source: ${realTimeData.provider}
Timestamp: ${realTimeData.timestamp}

UTILISE CES DONN√âES pour enrichir ton analyse et assurer l'exactitude de ta r√©ponse.`;
    }

    // Ajout des donn√©es workspace si disponibles
    if (workspaceData?.documentsUsed > 0) {
      systemPrompt += `\n\nDocuments workspace consult√©s (${workspaceData.documentsUsed}):
${workspaceData.documentSources.join(', ')}`;
    }

    // Construction du prompt utilisateur am√©lior√©
    let userPrompt = `${isFactual ? 'Question factuelle' : 'Question comparative'}: "${dilemma}"`;
    
    if (criteria.length > 0) {
      userPrompt += `\n\nCrit√®res d'√©valuation importants: ${criteria.map(c => c.name).join(', ')}`;
    }

    if (isFactual) {
      userPrompt += `\n\nFournis UNE r√©ponse factuelle pr√©cise avec une seule option dans le breakdown.`;
    } else {
      userPrompt += `\n\nFournis EXACTEMENT 4 options diff√©rentes avec des scores d√©croissants.
      Chaque option doit √™tre distincte avec ses propres avantages et inconv√©nients.
      Base ton analyse sur les crit√®res mentionn√©s.`;
    }

    // Appel √† l'API Claude
    const response = await fetch('https://api.anthropic.com/v1/messages', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${anthropicApiKey}`,
        'Content-Type': 'application/json',
        'anthropic-version': '2023-06-01'
      },
      body: JSON.stringify({
        model: model,
        max_tokens: 4000,
        temperature: 0.3,
        system: systemPrompt,
        messages: [
          {
            role: 'user',
            content: userPrompt
          }
        ]
      })
    });

    console.log(`üì° Claude API response status: ${response.status}`);

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Erreur API Claude:', response.status, errorText);
      throw new Error(`Erreur API Claude: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    console.log('üìä R√©ponse Claude re√ßue:', {
      hasContent: !!data.content,
      contentLength: data.content?.length || 0
    });

    if (!data.content || !data.content[0] || !data.content[0].text) {
      throw new Error('Format de r√©ponse invalide de Claude');
    }

    const content = data.content[0].text;
    console.log('üìù Contenu brut Claude (preview):', content.substring(0, 200) + '...');

    // Parsing du JSON
    let parsedResult;
    try {
      // Nettoyage du contenu (enlever les balises markdown potentielles)
      const cleanContent = content.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim();
      parsedResult = JSON.parse(cleanContent);
    } catch (parseError) {
      console.error('‚ùå Erreur parsing JSON:', parseError);
      console.error('Contenu √† parser:', content);
      throw new Error('Impossible de parser la r√©ponse Claude en JSON');
    }

    // Validation et enrichissement du r√©sultat
    const result = {
      recommendation: parsedResult.recommendation || 'Recommandation non disponible',
      description: parsedResult.description || 'Description non disponible',
      breakdown: Array.isArray(parsedResult.breakdown) ? parsedResult.breakdown : [],
      confidenceLevel: parsedResult.confidenceLevel || Math.min(95, Math.max(70, parsedResult.breakdown?.[0]?.score || 75)),
      dataFreshness: parsedResult.dataFreshness || (realTimeData?.content ? 'very-fresh' : 'moderate'),
      realTimeData: realTimeData ? {
        hasRealTimeData: !!realTimeData.content,
        timestamp: realTimeData.timestamp,
        sourcesCount: realTimeData.sources?.length || 0,
        searchQuery: realTimeData.searchQuery,
        provider: realTimeData.provider
      } : undefined,
      workspaceData: workspaceData,
      aiProvider: {
        provider: 'claude',
        model: model,
        success: true
      },
      timestamp: new Date().toISOString()
    };

    // Log du r√©sultat
    console.log('üìä R√©sultat final:', {
      hasRecommendation: !!result.recommendation,
      hasDescription: !!result.description,
      breakdownCount: result.breakdown?.length || 0,
      questionType: isFactual ? 'factual' : 'comparative'
    });

    console.log('‚úÖ Claude analysis completed successfully');

    return new Response(JSON.stringify(result), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });

  } catch (error) {
    console.error('‚ùå Erreur dans claude-decision-maker:', error);
    
    return new Response(JSON.stringify({ 
      error: error.message,
      aiProvider: {
        provider: 'claude',
        model: 'claude-sonnet-4-20250514',
        success: false,
        error: error.message
      },
      timestamp: new Date().toISOString()
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });
  }
});
