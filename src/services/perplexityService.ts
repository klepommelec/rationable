
import { supabase } from '@/integrations/supabase/client';

export interface PerplexitySearchResult {
  content: string;
  sources: string[];
  timestamp: string;
  searchQuery: string;
  requiresRealTimeData: boolean;
  error?: string;
  fallbackMessage?: string;
}

const cleanPerplexityResponse = (content: string): string => {
  if (!content) return content;
  
  // Nettoyage moins agressif pour pr√©server les informations contextuelles
  let cleaned = content
    // Supprimer uniquement les r√©f√©rences de citation en fin [1], [2], [3], etc.
    .replace(/\[\d+\](?=\s|$)/g, '')
    // Supprimer les r√©f√©rences multiples seulement en fin
    .replace(/(\[\d+\]\s*)+$/g, '')
    // Supprimer les espaces multiples
    .replace(/\s+/g, ' ')
    // Supprimer les espaces en d√©but et fin
    .trim();
  
  // Pour les questions de liste, pr√©server la structure compl√®te
  if (content.includes('1.') && content.includes('2.')) {
    console.log('üìã Structure de liste d√©tect√©e - pr√©servation du contenu complet');
    return cleaned;
  }
  
  // Pour les r√©ponses courtes, pr√©server la r√©ponse compl√®te
  const sentences = cleaned.split(/[.!?]+/);
  if (sentences.length <= 3 || cleaned.length < 150) {
    console.log('üìù R√©ponse courte d√©tect√©e - pr√©servation compl√®te');
    return cleaned;
  }
  
  return cleaned;
};

export const searchWithPerplexity = async (query: string, context?: string): Promise<PerplexitySearchResult> => {
  try {
    console.log('üîç Perplexity search - Query:', query);
    console.log('üìù Perplexity search - Context:', context);
    
    // D√©tecter l'intention temporelle et adapter la requ√™te
    const temporalIntent = detectTemporalIntent(query);
    console.log('‚è∞ Intention temporelle d√©tect√©e:', temporalIntent.type);
    
    // Adapter la requ√™te selon l'intention temporelle
    let optimizedQuery = query;
    
    switch (temporalIntent.type) {
      case 'current':
        optimizedQuery = `${query} - informations actuelles et disponibles maintenant`;
        break;
      case 'recent_past':
        optimizedQuery = `${query} - √©v√©nements r√©cemment termin√©s`;
        break;
      case 'future':
        optimizedQuery = `${query} - √©v√©nements programm√©s √† venir`;
        break;
      case 'historical':
        optimizedQuery = `${query} - donn√©es historiques pr√©cises`;
        break;
      case 'neutral':
      default:
        optimizedQuery = `${query} - informations v√©rifi√©es et pr√©cises`;
        break;
    }
    
    const { data, error } = await supabase.functions.invoke('perplexity-search', {
      body: { 
        query: optimizedQuery, 
        context: context || 'Recherche d\'informations r√©centes et √† jour'
      },
    });

    if (error) {
      console.error('‚ùå Perplexity search error:', error);
      throw new Error(`Perplexity API error: ${error.message}`);
    }

    if (!data || !data.content) {
      console.error('‚ùå Perplexity returned empty data:', data);
      throw new Error('Perplexity returned no content');
    }

    // Nettoyer la r√©ponse avant de la retourner
    const cleanedContent = cleanPerplexityResponse(data.content);
    console.log('‚úÖ Perplexity search successful - Content cleaned and ready');
    
    return {
      content: cleanedContent,
      sources: data.sources || [],
      timestamp: data.timestamp || new Date().toISOString(),
      searchQuery: query,
      requiresRealTimeData: true
    };
  } catch (error) {
    console.error('‚ùå Perplexity service error:', error);
    throw error;
  }
};

export interface TemporalIntent {
  type: 'current' | 'recent_past' | 'historical' | 'future' | 'neutral';
  context: string;
}

export const detectTemporalIntent = (dilemma: string): TemporalIntent => {
  const lowerDilemma = dilemma.toLowerCase();
  
  // D√©tection des intentions temporelles sp√©cifiques
  const currentKeywords = [
    'du moment', 'actuellement', 'en cours', 'maintenant', 'aujourd\'hui',
    'cette semaine', 'ce mois', 'disponible', 'ouvert', 'accessible'
  ];
  
  const recentPastKeywords = [
    'derni√®res', 'r√©centes', 'termin√©es', 'pass√©es', 'pr√©c√©dentes',
    'qui viennent de', 'il y a peu', 'r√©cemment ferm√©'
  ];
  
  const historicalKeywords = [
    'histoire de', 'ancien', 'ancienne', '2020', '2021', '2022', '2023',
    'avant', 'historique', 'pass√©', 'auparavant'
  ];
  
  const futureKeywords = [
    '√† venir', 'prochaine', 'prochain', 'futur', 'bient√¥t',
    '2026', '2027', 'pr√©vu', 'programm√©'
  ];
  
  // Classification par priorit√©
  if (currentKeywords.some(keyword => lowerDilemma.includes(keyword))) {
    return {
      type: 'current',
      context: '√©v√©nements actuellement en cours et disponibles'
    };
  }
  
  if (recentPastKeywords.some(keyword => lowerDilemma.includes(keyword))) {
    return {
      type: 'recent_past',
      context: '√©v√©nements r√©cemment termin√©s (3-6 derniers mois)'
    };
  }
  
  if (futureKeywords.some(keyword => lowerDilemma.includes(keyword))) {
    return {
      type: 'future',
      context: '√©v√©nements programm√©s √† venir'
    };
  }
  
  if (historicalKeywords.some(keyword => lowerDilemma.includes(keyword))) {
    return {
      type: 'historical',
      context: 'donn√©es historiques selon la p√©riode mentionn√©e'
    };
  }
  
  return {
    type: 'neutral',
    context: 'informations les plus pertinentes selon le contexte'
  };
};

export const detectRealTimeQuery = (dilemma: string): boolean => {
  const realTimeKeywords = [
    'draft', '2024', '2025', '2026', '√©lection', 'prochain', 'futur', 'prochaine',
    'r√©cent', 'derni√®re', 'nouveau', 'nouvelle', 'tendance', 'actualit√©',
    'maintenant', 'aujourd\'hui', 'cette ann√©e', 'ce mois', 'cette semaine',
    'qui a √©t√©', 'qui est', 'r√©sultats', 'gagnant', 'vainqueur'
  ];
  
  const lowerDilemma = dilemma.toLowerCase();
  return realTimeKeywords.some(keyword => lowerDilemma.includes(keyword));
};
