
import { supabase } from '@/integrations/supabase/client';

export interface PerplexitySearchResult {
  content: string;
  sources: string[];
  timestamp: string;
  searchQuery: string;
  requiresRealTimeData: boolean;
  error?: string;
  fallbackMessage?: string;
}

const cleanPerplexityResponse = (content: string): string => {
  if (!content) return content;
  
  // Supprimer les artefacts num√©riques parasites
  let cleaned = content
    // Supprimer les s√©quences num√©riques en fin de texte (123, 1234, 12345, etc.)
    .replace(/\s*\d{3,6}\s*$/g, '')
    // Supprimer les num√©ros isol√©s en fin de phrase
    .replace(/\s+\d{1,3}\s*$/g, '')
    // Supprimer les r√©f√©rences de citation malform√©es
    .replace(/\[\d+\]\s*$/g, '')
    // Supprimer les patterns num√©riques en milieu de phrase aussi
    .replace(/\s+\d{3,6}(?=\s|$)/g, '')
    // Supprimer les espaces multiples
    .replace(/\s+/g, ' ')
    // Supprimer les espaces en d√©but et fin
    .trim();
  
  return cleaned;
};

export const searchWithPerplexity = async (query: string, context?: string): Promise<PerplexitySearchResult> => {
  try {
    console.log('üîç Perplexity search - Query:', query);
    console.log('üìù Perplexity search - Context:', context);
    
    // Optimiser la requ√™te pour obtenir des donn√©es plus r√©centes
    const optimizedQuery = `${query} - Donn√©es r√©centes et actuelles 2024-2025`;
    
    const { data, error } = await supabase.functions.invoke('perplexity-search', {
      body: { 
        query: optimizedQuery, 
        context: context || 'Recherche d\'informations r√©centes et √† jour'
      },
    });

    if (error) {
      console.error('‚ùå Perplexity search error:', error);
      throw new Error(`Perplexity API error: ${error.message}`);
    }

    if (!data || !data.content) {
      console.error('‚ùå Perplexity returned empty data:', data);
      throw new Error('Perplexity returned no content');
    }

    // Nettoyer la r√©ponse avant de la retourner
    const cleanedContent = cleanPerplexityResponse(data.content);
    console.log('‚úÖ Perplexity search successful - Content cleaned and ready');
    
    return {
      content: cleanedContent,
      sources: data.sources || [],
      timestamp: data.timestamp || new Date().toISOString(),
      searchQuery: query,
      requiresRealTimeData: true
    };
  } catch (error) {
    console.error('‚ùå Perplexity service error:', error);
    throw error;
  }
};

export const detectRealTimeQuery = (dilemma: string): boolean => {
  const realTimeKeywords = [
    'draft', '2024', '2025', '2026', '√©lection', 'prochain', 'futur', 'prochaine',
    'r√©cent', 'derni√®re', 'nouveau', 'nouvelle', 'tendance', 'actualit√©',
    'maintenant', 'aujourd\'hui', 'cette ann√©e', 'ce mois', 'cette semaine',
    'qui a √©t√©', 'qui est', 'r√©sultats', 'gagnant', 'vainqueur'
  ];
  
  const lowerDilemma = dilemma.toLowerCase();
  return realTimeKeywords.some(keyword => lowerDilemma.includes(keyword));
};
