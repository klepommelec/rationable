
import { ICriterion, IResult, DEFAULT_CATEGORIES } from '@/types/decision';
import { callOpenAiApi } from './openai';
import { UploadedFileInfo } from './fileUploadService';
import { supabase } from '@/integrations/supabase/client';
import { searchWithPerplexity, detectRealTimeQuery } from './perplexityService';

export const generateCriteriaOnly = async (dilemma: string, files?: UploadedFileInfo[]) => {
  // D√©tecter si la requ√™te n√©cessite des donn√©es en temps r√©el
  const needsRealTimeData = detectRealTimeQuery(dilemma);
  let realTimeContext = '';
  let realTimeData = null;

  if (needsRealTimeData) {
    console.log('üîç Real-time data needed for:', dilemma);
    realTimeData = await searchWithPerplexity(dilemma, 'Criteria generation for decision making');
    if (realTimeData.content) {
      realTimeContext = `\n\nINFORMATIONS R√âCENTES (${realTimeData.timestamp}):\n${realTimeData.content}`;
    }
  }

  let prompt = `
Analysez ce dilemme et retournez une r√©ponse JSON avec les √©l√©ments suivants :

1. "emoji": Un emoji repr√©sentant le dilemme (ex: üíª, ‚úàÔ∏è, üè†, etc.)
2. "criteria": Une liste de 3-6 crit√®res importants pour √©valuer les options de ce dilemme
3. "suggestedCategory": L'ID de la cat√©gorie la plus appropri√©e parmi : ${DEFAULT_CATEGORIES.map(c => `"${c.id}" (${c.name} ${c.emoji})`).join(', ')}

Dilemme: "${dilemma}"${realTimeContext}`;

  if (files && files.length > 0) {
    prompt += `

Documents joints √† analyser (${files.length} fichier(s)) :
${files.map(f => `- ${f.fileName} (${f.fileType})`).join('\n')}

Analysez le contenu de ces documents pour mieux comprendre le contexte du dilemme et ajustez les crit√®res en cons√©quence.`;
  }

  prompt += `

R√©pondez UNIQUEMENT avec un objet JSON valide contenant "emoji", "criteria" et "suggestedCategory".

Exemple de format:
{
  "emoji": "üíª",
  "criteria": ["Performance", "Prix", "Facilit√© d'utilisation"],
  "suggestedCategory": "tech"
}`;

  const response = await callOpenAiApi(prompt, files);
  
  return {
    emoji: response.emoji || 'ü§î',
    criteria: response.criteria || [],
    suggestedCategory: response.suggestedCategory,
    realTimeData: realTimeData
  };
};

export const generateOptions = async (dilemma: string, criteria: ICriterion[], files?: UploadedFileInfo[]): Promise<IResult> => {
  const criteriaList = criteria.map(c => c.name).join(', ');
  
  // D√©tecter si la requ√™te n√©cessite des donn√©es en temps r√©el
  const needsRealTimeData = detectRealTimeQuery(dilemma);
  let realTimeContext = '';
  let realTimeData = null;
  let confidenceContext = '';

  if (needsRealTimeData) {
    console.log('üîç Real-time data needed for options generation:', dilemma);
    realTimeData = await searchWithPerplexity(dilemma, 'Options analysis and recommendations');
    
    if (realTimeData.content) {
      realTimeContext = `\n\nINFORMATIONS R√âCENTES (${realTimeData.timestamp}):\n${realTimeData.content}`;
      confidenceContext = `\n\nIMPORTANT: Cette analyse utilise des donn√©es r√©centes. Ajustez vos scores et votre niveau de confiance en cons√©quence. Pour les √©v√©nements futurs, basez-vous sur les tendances et analyses d'experts r√©centes.`;
    } else if (realTimeData.error) {
      confidenceContext = `\n\nATTENTION: Donn√©es en temps r√©el non disponibles (${realTimeData.fallbackMessage}). Analysez avec prudence et indiquez l'incertitude dans vos scores.`;
    }
  }
  
  let prompt = `
Analysez ce dilemme et g√©n√©rez des options avec √©valuation d√©taill√©e.

Dilemme: "${dilemma}"
Crit√®res d'√©valuation: ${criteriaList}${realTimeContext}${confidenceContext}`;

  if (files && files.length > 0) {
    prompt += `

Documents joints √† analyser (${files.length} fichier(s)) :
${files.map(f => `- ${f.fileName} (${f.fileType})`).join('\n')}

Analysez le contenu de ces documents pour enrichir votre analyse et vos recommandations.`;
  }

  prompt += `

Retournez un objet JSON avec:
1. "recommendation": La meilleure option recommand√©e (texte court)
2. "description": Explication d√©taill√©e de pourquoi cette option est recommand√©e
3. "imageQuery": Description pour g√©n√©rer une image (en anglais, tr√®s descriptive)
4. "confidenceLevel": Niveau de confiance de l'analyse (1-100) bas√© sur la qualit√© et fra√Æcheur des donn√©es
5. "dataFreshness": Fra√Æcheur des donn√©es utilis√©es ("very-fresh", "fresh", "moderate", "stale")
6. "infoLinks": Tableau de liens utiles avec "title" et "url" - FOURNIR DES LIENS R√âELS ET FONCTIONNELS ou des descriptions de recherche pr√©cises
7. "shoppingLinks": Tableau de liens d'achat avec "title" et "url" - FOURNIR DES LIENS R√âELS vers des sites fiables (Amazon, Fnac, etc.) ou des descriptions de recherche pr√©cises
8. "breakdown": Tableau d'objets avec:
   - "option": Nom de l'option
   - "pros": Tableau des avantages
   - "cons": Tableau des inconv√©nients  
   - "score": Note sur 100 (ajust√©e selon la qualit√© des donn√©es disponibles)

IMPORTANT pour les liens:
- Privil√©giez les sites officiels, Wikipedia, sites gouvernementaux, grandes plateformes reconnues
- Pour les liens d'achat: Amazon.fr, Fnac.com, Darty.com, Boulanger.com, etc.
- Si vous n'√™tes pas s√ªr d'un lien, utilisez une description claire pour une recherche Google

G√©n√©rez 3-5 options diff√©rentes et pertinentes. Soyez concret et actionnable.

R√©pondez UNIQUEMENT avec un objet JSON valide.`;

  const result = await callOpenAiApi(prompt, files);
  
  // Ajouter les m√©tadonn√©es de donn√©es en temps r√©el
  if (realTimeData) {
    result.realTimeData = {
      hasRealTimeData: !!realTimeData.content,
      timestamp: realTimeData.timestamp,
      sourcesCount: realTimeData.sources?.length || 0,
      searchQuery: realTimeData.searchQuery,
      error: realTimeData.error
    };
  }
  
  // Fetch social content (YouTube videos) en parall√®le
  try {
    console.log('üîç Fetching social content for:', result.recommendation);
    const { data: socialData, error } = await supabase.functions.invoke('social-content-fetcher', {
      body: { 
        query: result.recommendation,
        dilemma: dilemma,
        recommendation: result.recommendation
      }
    });
    
    if (error) {
      console.error('‚ùå Error fetching social content:', error);
    } else if (socialData?.youtubeVideos && socialData.youtubeVideos.length > 0) {
      console.log(`‚úÖ Found ${socialData.youtubeVideos.length} YouTube videos`);
      result.socialContent = {
        youtubeVideos: socialData.youtubeVideos
      };
    }
  } catch (socialError) {
    console.error('‚ùå Social content fetch failed:', socialError);
    // Continue without social content
  }
  
  return result;
};
