
import { ICriterion, IResult, DEFAULT_CATEGORIES } from '@/types/decision';
import { callOpenAiApi } from './openai';

export const generateCompleteAnalysis = async (dilemma: string) => {
  const prompt = `
Analysez ce dilemme et retournez une r√©ponse JSON COMPL√àTE avec tous les √©l√©ments suivants :

1. "emoji": Un emoji repr√©sentant le dilemma (ex: üíª, ‚úàÔ∏è, üè†, etc.)
2. "criteria": Une liste de 3-5 crit√®res importants pour √©valuer les options
3. "suggestedCategory": L'ID de la cat√©gorie la plus appropri√©e parmi : ${DEFAULT_CATEGORIES.map(c => `"${c.id}" (${c.name} ${c.emoji})`).join(', ')}
4. "recommendation": La meilleure option recommand√©e (texte court)
5. "description": Explication d√©taill√©e de pourquoi cette option est recommand√©e
6. "imageQuery": Description pour g√©n√©rer une image (en anglais, tr√®s descriptive)
7. "infoLinks": Tableau de liens utiles avec "title" et "url"
8. "shoppingLinks": Tableau de liens d'achat avec "title" et "url"
9. "breakdown": Tableau de 3 objets avec:
   - "option": Nom de l'option
   - "pros": Tableau des avantages
   - "cons": Tableau des inconv√©nients
   - "score": Note sur 100

Dilemme: "${dilemma}"

R√©pondez UNIQUEMENT avec un objet JSON valide contenant TOUS ces √©l√©ments. Soyez concret et actionnable.

Exemple de format:
{
  "emoji": "üíª",
  "criteria": ["Performance", "Prix", "Facilit√© d'utilisation"],
  "suggestedCategory": "tech",
  "recommendation": "MacBook Air M2",
  "description": "Le MacBook Air M2 offre le meilleur √©quilibre...",
  "imageQuery": "modern laptop computer on clean desk",
  "infoLinks": [{"title": "Test MacBook Air", "url": "https://example.com"}],
  "shoppingLinks": [{"title": "Apple Store", "url": "https://apple.com"}],
  "breakdown": [
    {
      "option": "MacBook Air M2",
      "pros": ["Excellente autonomie", "Performance √©lev√©e"],
      "cons": ["Prix √©lev√©"],
      "score": 88
    }
  ]
}`;

  const response = await callOpenAiApi(prompt);
  
  return {
    emoji: response.emoji || 'ü§î',
    criteria: response.criteria || [],
    suggestedCategory: response.suggestedCategory,
    result: {
      recommendation: response.recommendation || '',
      description: response.description || '',
      imageQuery: response.imageQuery || '',
      infoLinks: response.infoLinks || [],
      shoppingLinks: response.shoppingLinks || [],
      breakdown: response.breakdown || []
    }
  };
};

// Fonction simplifi√©e pour r√©g√©n√©rer seulement les options
export const generateOptionsOnly = async (dilemma: string, criteria: ICriterion[]): Promise<IResult> => {
  const criteriaList = criteria.map(c => c.name).join(', ');
  
  const prompt = `
G√©n√©rez uniquement les options pour ce dilemme avec les crit√®res donn√©s.

Dilemme: "${dilemma}"
Crit√®res: ${criteriaList}

Retournez un objet JSON avec:
1. "recommendation": La meilleure option recommand√©e
2. "description": Explication d√©taill√©e
3. "imageQuery": Description pour image (en anglais)
4. "infoLinks": Liens utiles
5. "shoppingLinks": Liens d'achat
6. "breakdown": 3 options avec pros/cons/score

R√©pondez UNIQUEMENT avec un objet JSON valide.`;

  return await callOpenAiApi(prompt);
};
