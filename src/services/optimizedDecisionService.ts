import { ICriterion, IResult } from '@/types/decision';
import { UploadedFileInfo } from './fileUploadService';
import { searchWithPerplexity } from './perplexityService';
import { callOpenAiApi } from './openai';
import { makeClaudeDecision } from './claudeService';
import { detectQuestionType } from './questionTypeDetector';
import { generateContextualEmoji } from './contextualEmojiService';

const cleanAIResponse = (text: string): string => {
  if (!text) return text;
  return text.replace(/\s+/g, ' ').trim();
};

// G√©n√©ration des crit√®res avec Perplexity
export const generateCriteriaWithPerplexity = async (
  dilemma: string, 
  files?: UploadedFileInfo[], 
  workspaceId?: string
): Promise<{ emoji: string, criteria: string[], suggestedCategory: string, provider: string }> => {
  try {
    console.log('üîç G√©n√©ration des crit√®res avec Perplexity');
    
    const prompt = `Analysez cette question et g√©n√©rez 4-6 crit√®res de d√©cision pertinents :

"${dilemma}"

R√©pondez UNIQUEMENT avec un JSON dans ce format exact :
{
  "criteria": ["crit√®re 1", "crit√®re 2", "crit√®re 3", "crit√®re 4"],
  "category": "personnelle/professionnelle/achat/voyage/autre"
}`;

    const result = await searchWithPerplexity(prompt);
    const content = cleanAIResponse(result.content);
    
    // Extraire le JSON de la r√©ponse
    const jsonMatch = content.match(/\{[\s\S]*\}/);
    if (!jsonMatch) {
      throw new Error('Format de r√©ponse invalide');
    }
    
    const parsedResponse = JSON.parse(jsonMatch[0]);
    const emoji = generateContextualEmoji(dilemma);
    
    return {
      emoji,
      criteria: parsedResponse.criteria || [],
      suggestedCategory: parsedResponse.category || 'autre',
      provider: 'perplexity'
    };
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©ration crit√®res Perplexity:', error);
    throw error;
  }
};

// G√©n√©ration de r√©ponse factuelle avec Perplexity
export const generateFactualAnswerWithPerplexity = async (
  dilemma: string,
  files?: UploadedFileInfo[],
  workspaceId?: string
): Promise<IResult> => {
  try {
    console.log('üîç G√©n√©ration de r√©ponse factuelle avec Perplexity');
    
    const prompt = `R√©pondez directement et factuellement √† cette question :

"${dilemma}"

Donnez une r√©ponse pr√©cise, factuelle et compl√®te avec des sources fiables. Ne proposez pas d'options ou d'analyses, juste la r√©ponse directe √† la question.`;

    const result = await searchWithPerplexity(prompt);
    
    return {
      recommendation: '',
      description: cleanAIResponse(result.content),
      breakdown: [],
      resultType: 'factual',
      realTimeData: {
        hasRealTimeData: true,
        timestamp: new Date().toISOString(),
        sourcesCount: result.sources.length,
        provider: 'perplexity',
        sources: result.sources
      },
      dataFreshness: 'very-fresh'
    };
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©ration r√©ponse factuelle:', error);
    throw error;
  }
};

// G√©n√©ration d'options comparatives avec OpenAI/Claude
export const generateComparativeWithOpenAI = async (
  dilemma: string,
  criteria: ICriterion[],
  files?: UploadedFileInfo[],
  workspaceId?: string
): Promise<IResult> => {
  try {
    console.log('ü§ñ G√©n√©ration comparative avec OpenAI/Claude');
    
    const prompt = `Analysez cette d√©cision et g√©n√©rez 3-4 options d√©taill√©es :

DILEMME: "${dilemma}"

CRIT√àRES √Ä √âVALUER:
${criteria.map((c, i) => `${i + 1}. ${c.name}`).join('\n')}

R√©pondez avec un JSON dans ce format exact :
{
  "description": "Description d√©taill√©e de 3-5 lignes expliquant le contexte et les enjeux",
  "options": [
    {
      "name": "Option 1",
      "scores": [8, 7, 6, 5, 4, 3],
      "pros": ["Avantage d√©taill√© 1", "Avantage d√©taill√© 2"],
      "cons": ["Inconv√©nient d√©taill√© 1", "Inconv√©nient d√©taill√© 2"],
      "description": "Description compl√®te de l'option"
    }
  ]
}

IMPORTANT: Le nombre de scores doit correspondre exactement au nombre de crit√®res (${criteria.length}). Soyez pr√©cis et d√©taill√© dans les avantages/inconv√©nients.`;

    // Essayer OpenAI en premier, puis Claude en fallback
    let apiResult;
    let provider = 'openai';
    
    try {
      apiResult = await callOpenAiApi(prompt, files);
    } catch (openaiError) {
      console.log('üîÑ Fallback vers Claude');
      apiResult = await makeClaudeDecision({
        dilemma,
        criteria,
        model: 'claude-sonnet-4-20250514'
      });
      provider = 'claude';
    }

    // Si c'est d√©j√† un objet IResult de Claude, le retourner directement
    if (apiResult.breakdown && Array.isArray(apiResult.breakdown)) {
      return {
        ...apiResult,
        resultType: 'comparative',
        aiProvider: {
          provider,
          model: provider === 'claude' ? 'claude-sonnet-4-20250514' : 'gpt-4o-mini',
          success: true
        }
      };
    }

    // Sinon, parser la r√©ponse OpenAI
    const content = typeof apiResult === 'string' ? apiResult : apiResult.content || JSON.stringify(apiResult);
    const jsonMatch = content.match(/\{[\s\S]*\}/);
    
    if (!jsonMatch) {
      throw new Error('Format de r√©ponse invalide');
    }
    
    const parsedResponse = JSON.parse(jsonMatch[0]);
    
    // Convertir les options au format breakdown
    const breakdown = parsedResponse.options.map((option: any, index: number) => ({
      option: option.name,
      pros: option.pros,
      cons: option.cons,
      score: option.scores.reduce((sum: number, score: number) => sum + score, 0)
    }));
    
    const winner = breakdown.reduce((max: any, option: any) => 
      option.score > max.score ? option : max
    );

    return {
      recommendation: winner.option,
      description: cleanAIResponse(parsedResponse.description),
      breakdown,
      resultType: 'comparative',
      aiProvider: {
        provider,
        model: provider === 'claude' ? 'claude-sonnet-4-20250514' : 'gpt-4o-mini',
        success: true
      },
      dataFreshness: 'fresh'
    };
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©ration comparative:', error);
    throw error;
  }
};

// Service principal optimis√©
export const generateOptimizedDecision = async (
  dilemma: string,
  criteria: ICriterion[],
  files?: UploadedFileInfo[],
  workspaceId?: string
): Promise<IResult> => {
  try {
    const questionType = detectQuestionType(dilemma);
    
    console.log(`üéØ Type de question d√©tect√©: ${questionType}`);
    
    if (questionType === 'factual') {
      return await generateFactualAnswerWithPerplexity(dilemma, files, workspaceId);
    } else {
      return await generateComparativeWithOpenAI(dilemma, criteria, files, workspaceId);
    }
  } catch (error) {
    console.error('‚ùå Erreur service optimis√©:', error);
    throw error;
  }
};