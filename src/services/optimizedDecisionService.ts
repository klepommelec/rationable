import { ICriterion, IResult, IBreakdownItem } from '@/types/decision';
import { UploadedFileInfo } from './fileUploadService';
import { searchWithPerplexity } from './perplexityService';
import { callOpenAiApi } from './openai';
import { makeClaudeDecision } from './claudeService';

import { generateContextualEmoji } from './contextualEmojiService';
import { 
  enrichFactualDescription, 
  improveDescription, 
  detectDilemmaContext 
} from './descriptionEnrichmentService';

// Fonction pour g√©n√©rer une description sp√©cifique √† la recommandation
const generateRecommendationDescription = async (
  winner: IBreakdownItem,
  allOptions: IBreakdownItem[],
  dilemma: string
): Promise<string> => {
  const otherOptions = allOptions.filter(opt => opt.option !== winner.option);
  
  const prompt = `Cr√©ez une description de recommandation pour cette d√©cision:

DILEMME: "${dilemma}"
OPTION RECOMMAND√âE: "${winner.option}"
AVANTAGES: ${winner.pros.join(', ')}
INCONV√âNIENTS: ${winner.cons?.join(', ') || 'Aucun'}
SCORE: ${winner.score}

${otherOptions.length > 0 ? `AUTRES OPTIONS:
${otherOptions.map(opt => `- ${opt.option} (score: ${opt.score})`).join('\n')}` : ''}

Cr√©ez une description en 2-3 phrases qui:
1. Commence par "${winner.option} est recommand√© car..."
2. Explique pourquoi cette option surpasse les autres
3. Mentionne les avantages cl√©s sp√©cifiques

Format: Description concise et factuelle.`;

  try {
    const response = await callOpenAiApi(prompt);
    return response.trim();
  } catch (error) {
    console.error('Erreur g√©n√©ration description recommandation:', error);
    return `${winner.option} est recommand√© en raison de ses avantages significatifs: ${winner.pros.slice(0, 2).join(' et ')}.`;
  }
};

// D√©tection de questions n√©cessitant des listes compl√®tes
const detectListQuestion = (dilemma: string): boolean => {
  const listKeywords = [
    'quelles expositions',
    'quels √©v√©nements', 
    'que puis-je visiter',
    'quelles options',
    'que faire',
    'o√π aller',
    'quoi voir',
    'expositions temporaires',
    '√©v√©nements en cours',
    'activit√©s disponibles'
  ];
  
  return listKeywords.some(keyword => 
    dilemma.toLowerCase().includes(keyword.toLowerCase())
  );
};

const cleanAIResponse = (text: string): string => {
  if (!text) return text;
  
  // Nettoyer et valider la r√©ponse, mais pr√©server le formatage JSON
  let cleaned = text.trim();
  
  return cleaned;
};

// Fonction pour parser une r√©ponse Perplexity et extraire des options multiples
const parseMultipleItemsFromPerplexity = (content: string, dilemma: string): { recommendation: string; breakdown: IBreakdownItem[] } => {
  console.log('üîç Contenu √† parser:', content.substring(0, 300));
  
  let items: string[] = [];
  
  // Pattern sp√©cifique pour les expositions (d√©tecte les titres entre guillemets ou tirets)
  const expositionPattern = /[-‚Äì‚Äî]\s*([^-‚Äì‚Äî\n]{10,100})(?:\s*\([^)]+\))?/g;
  let matches = Array.from(content.matchAll(expositionPattern));
  
  if (matches.length >= 2) {
    items = matches.map(match => match[1].trim()).filter(item => item.length > 5);
    console.log('üìã Expositions trouv√©es via pattern:', items.length);
  }
  
  // Si pas d'expositions, essayer de d√©tecter par parenth√®ses et dates
  if (items.length < 2) {
    const eventPattern = /([A-Z√Ä√Å√Ç√É√Ñ√Ö√Ü√á√à√â√ä√ã√å√ç√é√è√ê√ë√í√ì√î√ï√ñ][^()\n]{5,80})\s*\([^)]*(?:202[4-5]|janvier|f√©vrier|mars|avril|mai|juin|juillet|ao√ªt|septembre|octobre|novembre|d√©cembre)[^)]*\)/g;
    matches = Array.from(content.matchAll(eventPattern));
    
    if (matches.length >= 2) {
      items = matches.map(match => match[1].trim()).filter(item => item.length > 5);
      console.log('üìÖ √âv√©nements trouv√©s via dates:', items.length);
    }
  }
  
  // Pattern pour d√©tecter les noms d'expositions avec des mots cl√©s
  if (items.length < 2) {
    const titlePattern = /(?:exposition|√©v√©nement|atelier|visite|installation|parcours)[\s:]*([^.\n]{10,80})(?=\s*[-‚Äì‚Äî(]|\s*$)/gi;
    matches = Array.from(content.matchAll(titlePattern));
    
    if (matches.length >= 2) {
      items = matches.map(match => match[1].trim()).filter(item => item.length > 5);
      console.log('üé® √âv√©nements trouv√©s via mots-cl√©s:', items.length);
    }
  }
  
  // Derni√®re tentative: diviser par segments logiques avec des indices forts
  if (items.length < 2) {
    // Chercher des segments s√©par√©s par des tirets ou des points
    const segments = content.split(/[-‚Äì‚Äî]\s+/).filter(s => s.trim().length > 20);
    if (segments.length >= 3) { // Au moins 3 segments (intro + 2 expositions)
      items = segments.slice(1, 6).map(s => s.split('(')[0].trim()); // Prendre les titres avant parenth√®ses
      console.log('üìÑ Segments trouv√©s:', items.length);
    }
  }
  
  // Si toujours pas d'√©l√©ments multiples, formater proprement le contenu unique
  if (items.length < 2) {
    console.log('‚ö†Ô∏è Pas d\'√©l√©ments multiples d√©tect√©s');
    // Nettoyer le contenu pour une meilleure pr√©sentation
    const cleanedContent = content
      .replace(/\s+/g, ' ')
      .replace(/[-‚Äì‚Äî]\s*/g, '\n‚Ä¢ ')
      .trim();
    
    return {
      recommendation: cleanedContent,
      breakdown: []
    };
  }
  
  // Cr√©er des IBreakdownItem pour chaque √©l√©ment trouv√©
  const breakdown: IBreakdownItem[] = items.slice(0, 5).map((item, index) => ({
    option: extractTitle(item),
    pros: extractPositives(item, content), // Passer le contenu complet pour plus de contexte
    cons: [], 
    score: 90 - (index * 5)
  }));
  
  // Cr√©er une recommandation format√©e proprement
  const recommendation = `Voici les principales expositions actuellement disponibles :\n\n‚Ä¢ ${breakdown[0].option}\n\nRecommandation : ${breakdown[0].option} semble √™tre l'exposition phare du moment.`;
  
  console.log(`‚úÖ Parser termin√©: ${breakdown.length} options cr√©√©es`);
  
  return { recommendation, breakdown };
};

// Extraire le titre/nom principal d'un √©l√©ment
const extractTitle = (item: string): string => {
  // Chercher un titre entre guillemets ou en d√©but de phrase
  const titleMatch = item.match(/^["\']?([^"'\n(]{3,50})["\']?/);
  if (titleMatch) {
    return titleMatch[1].trim();
  }
  
  // Prendre les premiers mots jusqu'√† une date ou parenth√®se
  const shortMatch = item.match(/^([^()\n]{3,50})(?:\s*\(|$)/);
  if (shortMatch) {
    return shortMatch[1].trim();
  }
  
  // Fallback: premiers 50 caract√®res
  return item.substring(0, 50).trim();
};

// Extraire les aspects positifs d'un √©l√©ment
const extractPositives = (item: string, fullContent?: string): string[] => {
  const positives: string[] = [];
  
  // Chercher des dates
  const dateMatch = item.match(/(\d{1,2}\/\d{1,2}\/\d{4}|\d{1,2}\s+(?:janvier|f√©vrier|mars|avril|mai|juin|juillet|ao√ªt|septembre|octobre|novembre|d√©cembre)|\d{4})/i);
  if (dateMatch) {
    positives.push(`Disponible ${dateMatch[1]}`);
  }
  
  // Chercher des lieux
  const locationMatch = item.match(/(mus√©e|galerie|centre|salle|lieu|espace)\s+([A-Z][a-z\s]+)/i);
  if (locationMatch) {
    positives.push(`Lieu: ${locationMatch[2].trim()}`);
  }
  
  // Ajouter une description g√©n√©rique si pas d'√©l√©ments trouv√©s
  if (positives.length === 0) {
    positives.push("Option recommand√©e actuellement");
  }
  
  return positives;
};

// G√©n√©ration des crit√®res avec Perplexity
export const generateCriteriaWithPerplexity = async (
  dilemma: string, 
  files?: UploadedFileInfo[], 
  workspaceId?: string
): Promise<{ emoji: string, criteria: string[], suggestedCategory: string, provider: string }> => {
  try {
    console.log('üîç G√©n√©ration des crit√®res avec Perplexity');
    
    const prompt = `Analysez cette question et g√©n√©rez 4-6 crit√®res de d√©cision pertinents :

"${dilemma}"

R√©pondez UNIQUEMENT avec un JSON dans ce format exact :
{
  "criteria": ["crit√®re 1", "crit√®re 2", "crit√®re 3", "crit√®re 4"],
  "category": "personnelle/professionnelle/achat/voyage/autre"
}`;

    const result = await searchWithPerplexity(prompt);
    const content = cleanAIResponse(result.content);
    
    console.log('üîç Contenu brut de Perplexity (premiers 500 caract√®res):', content.substring(0, 500));
    
    // Am√©liorer l'extraction JSON avec plusieurs strat√©gies
    let parsedResponse;
    let jsonString = content;
    
    try {
      // Strat√©gie 1: Parser directement
      parsedResponse = JSON.parse(content);
      console.log('‚úÖ Parsing direct r√©ussi');
    } catch (directError) {
      console.log('‚ùå Parsing direct √©chou√©, essai d\'extraction:', directError.message);
      
      try {
        // Strat√©gie 2: Extraire le JSON le plus complet possible
        // Trouver la premi√®re accolade ouvrante et la derni√®re fermante
        const firstBrace = content.indexOf('{');
        const lastBrace = content.lastIndexOf('}');
        
        if (firstBrace !== -1 && lastBrace !== -1 && lastBrace > firstBrace) {
          jsonString = content.substring(firstBrace, lastBrace + 1);
          console.log('üîç JSON extrait (premiers 300 caract√®res):', jsonString.substring(0, 300));
          
          parsedResponse = JSON.parse(jsonString);
          console.log('‚úÖ Parsing avec extraction r√©ussi');
        } else {
          console.error('‚ùå Impossible de trouver les accolades JSON');
          throw new Error('Aucune structure JSON valide d√©tect√©e');
        }
      } catch (extractError) {
        console.error('‚ùå Parsing avec extraction √©chou√©:', extractError.message);
        console.error('Contenu JSON tent√©:', jsonString.substring(0, 200));
        
        // Strat√©gie 3: Fallback avec crit√®res g√©n√©riques
        console.log('üîÑ Utilisation de crit√®res g√©n√©riques de fallback');
        const emoji = generateContextualEmoji(dilemma);
        
        // G√©n√©rer des crit√®res g√©n√©riques intelligents bas√©s sur le type de question
        const isListQuestion = detectListQuestion(dilemma);
        const genericCriteria = isListQuestion 
          ? ['Disponibilit√© actuelle', 'Popularit√©', 'Accessibilit√©', 'Pertinence']
          : ['Qualit√©', 'Prix', 'Convenience', 'Durabilit√©'];
        
        return {
          emoji,
          criteria: genericCriteria,
          suggestedCategory: 'autre',
          provider: 'perplexity-fallback'
        };
      }
    }
    
    const emoji = generateContextualEmoji(dilemma);
    
    return {
      emoji,
      criteria: parsedResponse.criteria || [],
      suggestedCategory: parsedResponse.category || 'autre',
      provider: 'perplexity'
    };
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©ration crit√®res Perplexity:', error);
    throw error;
  }
};

// G√©n√©ration de r√©ponse adaptative avec Perplexity
export const generateAdaptiveAnswerWithPerplexity = async (
  dilemma: string,
  files?: UploadedFileInfo[],
  workspaceId?: string
): Promise<IResult> => {
  try {
    console.log('üîç G√©n√©ration adaptative avec Perplexity');
    
    const isListQuestion = detectListQuestion(dilemma);
    console.log(`üìã Question de type liste d√©tect√©e: ${isListQuestion}`);
    
    // Prompt adaptatif selon le type de question
    const adaptivePrompt = isListQuestion 
      ? `${dilemma}

INSTRUCTIONS SP√âCIALES - LISTE COMPL√àTE :
- Recherchez et listez TOUTES les options disponibles (expositions, √©v√©nements, activit√©s)
- Incluez les dates, lieux et d√©tails importants
- Format: "Nom 1 (dates/d√©tails), Nom 2 (dates/d√©tails), etc."
- Ne limitez pas votre r√©ponse, soyez exhaustif
- V√©rifiez les sources officielles et r√©centes

CONTEXTE : Donn√©es actuelles et compl√®tes 2025`
      : `${dilemma}

INSTRUCTIONS - R√âPONSE PR√âCISE :
- Utilisez UNIQUEMENT des noms r√©els et pr√©cis
- √âvitez les termes g√©n√©riques
- R√©ponse concise mais compl√®te
- Sources officielles et v√©rifi√©es

CONTEXTE : Donn√©es r√©elles et v√©rifi√©es 2025`;

    const result = await searchWithPerplexity(adaptivePrompt);
    console.log('üìù R√©ponse adaptative re√ßue:', result.content.substring(0, 200));
    
    // Parser la r√©ponse pour extraire des √©l√©ments multiples si c'est une question de liste
    const { recommendation, breakdown } = isListQuestion 
      ? parseMultipleItemsFromPerplexity(result.content, dilemma)
      : { recommendation: result.content.trim(), breakdown: [] };
    
    console.log(`üìä Items extraits: ${breakdown.length} options trouv√©es`);
    if (breakdown.length > 0) {
      console.log(`üìã Options: ${breakdown.map(item => item.option).join(', ')}`);
    }
    
    // Enrichir la description 
    const context = detectDilemmaContext(dilemma);
    const enrichedDescription = await enrichFactualDescription(
      dilemma, 
      recommendation, 
      context.domain
    );
    
    return {
      recommendation,
      description: enrichedDescription,
      breakdown,
      
      realTimeData: {
        hasRealTimeData: true,
        timestamp: new Date().toISOString(),
        sourcesCount: result.sources.length,
        provider: 'perplexity',
        sources: result.sources
      },
      dataFreshness: 'very-fresh'
    };
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©ration adaptative:', error);
    // Fallback vers mode comparatif
    console.log('üîÑ Fallback vers mode comparatif');
    const comparativeQuestion = `Analysez les options pour : ${dilemma}`;
    return await generateComparativeWithOpenAI(comparativeQuestion, [], files, workspaceId);
  }
};

// G√©n√©ration d'options comparatives avec OpenAI/Claude
export const generateComparativeWithOpenAI = async (
  dilemma: string,
  criteria: ICriterion[],
  files?: UploadedFileInfo[],
  workspaceId?: string
): Promise<IResult> => {
  try {
    console.log('ü§ñ G√©n√©ration comparative avec OpenAI/Claude');
    
    const prompt = `Analysez cette d√©cision et g√©n√©rez 3-4 options d√©taill√©es :

DILEMME: "${dilemma}"

CRIT√àRES √Ä √âVALUER:
${criteria.map((c, i) => `${i + 1}. ${c.name}`).join('\n')}

R√©pondez avec un JSON dans ce format exact :
{
  "description": "Analyse contextuelle sp√©cifique √† cette situation pr√©cise avec les enjeux particuliers de ce dilemme",
  "recommendationDescription": "Description sp√©cifique expliquant pourquoi la premi√®re option est recommand√©e",
  "options": [
    {
      "name": "Option sp√©cifique 1",
      "pros": ["Avantage d√©taill√© et pr√©cis 1", "Avantage d√©taill√© et pr√©cis 2"],
      "cons": ["Inconv√©nient d√©taill√© et pr√©cis 1", "Inconv√©nient d√©taill√© et pr√©cis 2"],
      "description": "Description unique et sp√©cifique de cette option pr√©cise"
    }
  ]
}

INSTRUCTIONS CRITIQUES:
- Description g√©n√©rale : Soyez SP√âCIFIQUE au dilemme pos√©, pas de texte g√©n√©rique
- Noms d'options : Pr√©cis et directs (ex: "Toyota Corolla", "Bali", "Universit√© Paris-Saclay")
- Pros/cons : D√©taill√©s et factuels, pas de g√©n√©ralit√©s
- Description par option : Unique et personnalis√©e pour chaque option
- INTERDICTION de phrases g√©n√©riques comme "Le choix de X est une d√©cision cruciale..."
- Concentrez-vous sur la SP√âCIFICIT√â et l'UTILIT√â de chaque information`;

    // Essayer OpenAI en premier, puis Claude en fallback
    let apiResult;
    let provider = 'openai';
    
    try {
      apiResult = await callOpenAiApi(prompt, files);
    } catch (openaiError) {
      console.log('üîÑ Fallback vers Claude');
      apiResult = await makeClaudeDecision({
        dilemma,
        criteria,
        model: 'claude-sonnet-4-20250514'
      });
      provider = 'claude';
    }

    // Si c'est d√©j√† un objet IResult de Claude, le retourner directement
    if (apiResult.breakdown && Array.isArray(apiResult.breakdown)) {
      return {
        ...apiResult,
        resultType: 'comparative',
        aiProvider: {
          provider,
          model: provider === 'claude' ? 'claude-sonnet-4-20250514' : 'gpt-4o-mini',
          success: true
        }
      };
    }

    // Sinon, parser la r√©ponse OpenAI avec parsing robuste
    const content = typeof apiResult === 'string' ? apiResult : apiResult.content || JSON.stringify(apiResult);
    
    let parsedResponse;
    try {
      // D'abord essayer de parser directement le contenu
      parsedResponse = JSON.parse(content);
    } catch {
      // Si √ßa √©choue, essayer d'extraire le JSON avec regex
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        console.error('Failed to extract JSON from API content:', content.substring(0, 200));
        throw new Error('Format de r√©ponse invalide - aucun JSON trouv√© dans la r√©ponse API');
      }
      try {
        parsedResponse = JSON.parse(jsonMatch[0]);
      } catch (parseError) {
        console.error('Failed to parse extracted JSON from API:', jsonMatch[0].substring(0, 200));
        throw new Error('Format de r√©ponse invalide - JSON malform√© dans la r√©ponse API');
      }
    }
    
    // Convertir les options au format breakdown (sans scores)
    const breakdown = parsedResponse.options.map((option: any, index: number) => ({
      option: option.name,
      pros: option.pros,
      cons: option.cons,
      score: 0 // Plus de calcul de score
    }));
    
    // Le premier option est consid√©r√© comme la recommandation
    const winner = breakdown[0] || breakdown[0];

    // Utiliser la description de recommandation ou la g√©n√©rer
    let finalDescription = parsedResponse.recommendationDescription;
    
    if (!finalDescription) {
      finalDescription = await generateRecommendationDescription(winner, breakdown, dilemma);
    }

    const result = {
      recommendation: winner.option,
      description: finalDescription,
      breakdown,
      resultType: 'comparative' as const,
      aiProvider: {
        provider,
        model: provider === 'claude' ? 'claude-sonnet-4-20250514' : 'gpt-4o-mini',
        success: true
      },
      dataFreshness: 'fresh' as const
    };

    // Am√©liorer la description si elle est toujours g√©n√©rique
    const improvedDescription = await improveDescription(
      result.description,
      dilemma,
      result
    );
    
    return {
      ...result,
      description: improvedDescription
    };
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©ration comparative:', error);
    throw error;
  }
};

// Service principal unifi√© et adaptatif
export const generateOptimizedDecision = async (
  dilemma: string, 
  criteria: ICriterion[], 
  files?: UploadedFileInfo[], 
  workspaceId?: string, 
  forcedType?: 'comparative'
): Promise<IResult> => {
  console.log('üéØ [generateOptimizedDecision] Starting with adaptive approach:', {
    dilemma: dilemma.substring(0, 50) + '...',
    criteriaCount: criteria.length,
    filesCount: files?.length || 0,
    workspaceId: workspaceId || 'none'
  });

  console.log('‚öñÔ∏è [generateOptimizedDecision] Using unified comparative analysis');
  return await generateComparativeWithOpenAI(dilemma, criteria, files, workspaceId);
};