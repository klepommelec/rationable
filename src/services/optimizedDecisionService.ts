import { ICriterion, IResult, IBreakdownItem } from '@/types/decision';
import { UploadedFileInfo } from './fileUploadService';
import { searchWithPerplexity } from './perplexityService';
import { callOpenAiApi } from './openai';
import { makeClaudeDecision } from './claudeService';
import { detectQuestionType } from './questionTypeDetector';
import { generateContextualEmoji } from './contextualEmojiService';
import { 
  enrichFactualDescription, 
  improveDescription, 
  detectDilemmaContext 
} from './descriptionEnrichmentService';

// Fonction pour g√©n√©rer une description sp√©cifique √† la recommandation
const generateRecommendationDescription = async (
  winner: IBreakdownItem,
  allOptions: IBreakdownItem[],
  dilemma: string
): Promise<string> => {
  const otherOptions = allOptions.filter(opt => opt.option !== winner.option);
  
  const prompt = `Cr√©ez une description de recommandation pour cette d√©cision:

DILEMME: "${dilemma}"
OPTION RECOMMAND√âE: "${winner.option}"
AVANTAGES: ${winner.pros.join(', ')}
INCONV√âNIENTS: ${winner.cons?.join(', ') || 'Aucun'}
SCORE: ${winner.score}

${otherOptions.length > 0 ? `AUTRES OPTIONS:
${otherOptions.map(opt => `- ${opt.option} (score: ${opt.score})`).join('\n')}` : ''}

Cr√©ez une description en 2-3 phrases qui:
1. Commence par "${winner.option} est recommand√© car..."
2. Explique pourquoi cette option surpasse les autres
3. Mentionne les avantages cl√©s sp√©cifiques

Format: Description concise et factuelle.`;

  try {
    const response = await callOpenAiApi(prompt);
    return response.trim();
  } catch (error) {
    console.error('Erreur g√©n√©ration description recommandation:', error);
    return `${winner.option} est recommand√© en raison de ses avantages significatifs: ${winner.pros.slice(0, 2).join(' et ')}.`;
  }
};

// Validation stricte des r√©ponses factuelles
const validateFactualResponse = (text: string): { isValid: boolean; error?: string } => {
  if (!text) return { isValid: false, error: 'R√©ponse vide' };
  
  // V√©rifier les noms g√©n√©riques interdits (plus strict)
  const genericPatterns = [
    /\b(√©quipe\s*[a-z]|team\s*[a-z])\b/gi,
    /\b(joueur\s*[a-z]|player\s*[a-z])\b/gi,
    /\b(candidat\s*[a-z]|candidate\s*[a-z])\b/gi,
    /\b(option\s*[a-z]|choice\s*[a-z])\b/gi,
    /\b(personne\s*[a-z]|person\s*[a-z])\b/gi,
    /\b(entreprise\s*[a-z]|company\s*[a-z])\b/gi
  ];
  
  const hasGenericNames = genericPatterns.some(pattern => pattern.test(text));
  if (hasGenericNames) {
    return { isValid: false, error: 'Contient des noms g√©n√©riques' };
  }
  
  // V√©rifier si la r√©ponse indique une incapacit√© √† r√©pondre
  const uncertaintyPatterns = [
    /je ne sais pas/i,
    /impossible de/i,
    /donn√©es non disponibles/i,
    /information non trouv√©e/i,
    /uncertain/i,
    /cannot determine/i
  ];
  
  const hasUncertainty = uncertaintyPatterns.some(pattern => pattern.test(text));
  if (hasUncertainty) {
    return { isValid: false, error: 'R√©ponse incertaine' };
  }
  
  return { isValid: true };
};

const cleanAIResponse = (text: string): string => {
  if (!text) return text;
  
  // Nettoyer et valider la r√©ponse
  let cleaned = text
    .replace(/\s+/g, ' ')
    .trim();
  
  return cleaned;
};

// G√©n√©ration des crit√®res avec Perplexity
export const generateCriteriaWithPerplexity = async (
  dilemma: string, 
  files?: UploadedFileInfo[], 
  workspaceId?: string
): Promise<{ emoji: string, criteria: string[], suggestedCategory: string, provider: string }> => {
  try {
    console.log('üîç G√©n√©ration des crit√®res avec Perplexity');
    
    const prompt = `Analysez cette question et g√©n√©rez 4-6 crit√®res de d√©cision pertinents :

"${dilemma}"

R√©pondez UNIQUEMENT avec un JSON dans ce format exact :
{
  "criteria": ["crit√®re 1", "crit√®re 2", "crit√®re 3", "crit√®re 4"],
  "category": "personnelle/professionnelle/achat/voyage/autre"
}`;

    const result = await searchWithPerplexity(prompt);
    const content = cleanAIResponse(result.content);
    
    // Extraire le JSON de la r√©ponse
    const jsonMatch = content.match(/\{[\s\S]*\}/);
    if (!jsonMatch) {
      throw new Error('Format de r√©ponse invalide');
    }
    
    const parsedResponse = JSON.parse(jsonMatch[0]);
    const emoji = generateContextualEmoji(dilemma);
    
    return {
      emoji,
      criteria: parsedResponse.criteria || [],
      suggestedCategory: parsedResponse.category || 'autre',
      provider: 'perplexity'
    };
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©ration crit√®res Perplexity:', error);
    throw error;
  }
};

// G√©n√©ration de r√©ponse factuelle avec Perplexity et syst√®me de retry/fallback
export const generateFactualAnswerWithPerplexity = async (
  dilemma: string,
  files?: UploadedFileInfo[],
  workspaceId?: string
): Promise<IResult> => {
  let attempt = 0;
  const maxAttempts = 3; // Augmenter √† 3 tentatives
  
  while (attempt < maxAttempts) {
    try {
      attempt++;
      console.log(`üîç G√©n√©ration factuelle avec Perplexity (tentative ${attempt}/${maxAttempts})`);
      
      // Prompt ultra-strict selon la tentative
      const strictnessLevel = attempt === 1 ? 'NORMAL' : attempt === 2 ? 'STRICT' : 'ULTRA-STRICT';
      
      const enhancedPrompt = `${dilemma}

R√àGLES ${strictnessLevel} - ABSOLUMENT OBLIGATOIRE :
1. INTERDICTION TOTALE des noms g√©n√©riques : JAMAIS "Joueur A", "√âquipe X", "Candidat Y", "Option 1", etc.
2. SEULS des noms R√âELS et PR√âCIS sont accept√©s : "Zaccharie Risacher", "Cooper Flagg", "Victor Wembanyama"
3. Si vous ne trouvez PAS le nom exact, √©crivez EXACTEMENT : "Information non disponible"
4. V√©rifiez l'ann√©e de la question : 2025 a eu lieu, 2026 est dans le futur
5. R√©ponse en 1 phrase maximum avec UNIQUEMENT le nom r√©el
6. Supprimez toutes les r√©f√©rences [1][2][3]

${attempt > 1 ? 'ATTENTION : Tentative ' + attempt + ' - Soyez encore plus pr√©cis !' : ''}

CONTEXTE : Donn√©es r√©elles et v√©rifi√©es 2025`;

      const result = await searchWithPerplexity(enhancedPrompt);
      console.log(`üìù R√©ponse brute tentative ${attempt}:`, result.content);
      
      const validation = validateFactualResponse(result.content);
      
      if (validation.isValid) {
        console.log('‚úÖ R√©ponse factuelle valid√©e avec succ√®s');
        
        // Enrichir la description factuelle
        const context = detectDilemmaContext(dilemma);
        const enrichedDescription = await enrichFactualDescription(
          dilemma, 
          result.content, 
          context.domain
        );
        
        return {
          recommendation: result.content.trim(),
          description: enrichedDescription,
          breakdown: [],
          resultType: 'factual',
          realTimeData: {
            hasRealTimeData: true,
            timestamp: new Date().toISOString(),
            sourcesCount: result.sources.length,
            provider: 'perplexity',
            sources: result.sources
          },
          dataFreshness: 'very-fresh'
        };
      } else {
        console.warn(`‚ö†Ô∏è Tentative ${attempt} √©chou√©e - ${validation.error}`);
        console.warn(`üìÑ Contenu rejet√©: "${result.content}"`);
        
        if (attempt === maxAttempts) {
          console.log('üîÑ √âchec de toutes les tentatives factuelles ‚Üí Fallback vers comparative');
          const comparativeQuestion = `Analysez les candidats potentiels pour : ${dilemma}`;
          return await generateComparativeWithOpenAI(comparativeQuestion, [], files, workspaceId);
        }
      }
    } catch (error) {
      console.error(`‚ùå Erreur tentative ${attempt}:`, error);
      
      if (attempt === maxAttempts) {
        console.log('üîÑ Fallback final vers mode comparatif apr√®s erreur');
        const comparativeQuestion = `Analysez les options pour : ${dilemma}`;
        return await generateComparativeWithOpenAI(comparativeQuestion, [], files, workspaceId);
      }
    }
  }
  
  throw new Error('√âchec apr√®s toutes les tentatives');
};

// G√©n√©ration d'options comparatives avec OpenAI/Claude
export const generateComparativeWithOpenAI = async (
  dilemma: string,
  criteria: ICriterion[],
  files?: UploadedFileInfo[],
  workspaceId?: string
): Promise<IResult> => {
  try {
    console.log('ü§ñ G√©n√©ration comparative avec OpenAI/Claude');
    
    const prompt = `Analysez cette d√©cision et g√©n√©rez 3-4 options d√©taill√©es :

DILEMME: "${dilemma}"

CRIT√àRES √Ä √âVALUER:
${criteria.map((c, i) => `${i + 1}. ${c.name}`).join('\n')}

R√©pondez avec un JSON dans ce format exact :
{
  "description": "Analyse contextuelle sp√©cifique √† cette situation pr√©cise avec les enjeux particuliers de ce dilemme",
  "recommendationDescription": "Description sp√©cifique expliquant pourquoi la premi√®re option est recommand√©e",
  "options": [
    {
      "name": "Option sp√©cifique 1",
      "pros": ["Avantage d√©taill√© et pr√©cis 1", "Avantage d√©taill√© et pr√©cis 2"],
      "cons": ["Inconv√©nient d√©taill√© et pr√©cis 1", "Inconv√©nient d√©taill√© et pr√©cis 2"],
      "description": "Description unique et sp√©cifique de cette option pr√©cise"
    }
  ]
}

INSTRUCTIONS CRITIQUES:
- Description g√©n√©rale : Soyez SP√âCIFIQUE au dilemme pos√©, pas de texte g√©n√©rique
- Noms d'options : Pr√©cis et directs (ex: "Toyota Corolla", "Bali", "Universit√© Paris-Saclay")
- Pros/cons : D√©taill√©s et factuels, pas de g√©n√©ralit√©s
- Description par option : Unique et personnalis√©e pour chaque option
- INTERDICTION de phrases g√©n√©riques comme "Le choix de X est une d√©cision cruciale..."
- Concentrez-vous sur la SP√âCIFICIT√â et l'UTILIT√â de chaque information`;

    // Essayer OpenAI en premier, puis Claude en fallback
    let apiResult;
    let provider = 'openai';
    
    try {
      apiResult = await callOpenAiApi(prompt, files);
    } catch (openaiError) {
      console.log('üîÑ Fallback vers Claude');
      apiResult = await makeClaudeDecision({
        dilemma,
        criteria,
        model: 'claude-sonnet-4-20250514'
      });
      provider = 'claude';
    }

    // Si c'est d√©j√† un objet IResult de Claude, le retourner directement
    if (apiResult.breakdown && Array.isArray(apiResult.breakdown)) {
      return {
        ...apiResult,
        resultType: 'comparative',
        aiProvider: {
          provider,
          model: provider === 'claude' ? 'claude-sonnet-4-20250514' : 'gpt-4o-mini',
          success: true
        }
      };
    }

    // Sinon, parser la r√©ponse OpenAI
    const content = typeof apiResult === 'string' ? apiResult : apiResult.content || JSON.stringify(apiResult);
    const jsonMatch = content.match(/\{[\s\S]*\}/);
    
    if (!jsonMatch) {
      throw new Error('Format de r√©ponse invalide');
    }
    
    const parsedResponse = JSON.parse(jsonMatch[0]);
    
    // Convertir les options au format breakdown (sans scores)
    const breakdown = parsedResponse.options.map((option: any, index: number) => ({
      option: option.name,
      pros: option.pros,
      cons: option.cons,
      score: 0 // Plus de calcul de score
    }));
    
    // Le premier option est consid√©r√© comme la recommandation
    const winner = breakdown[0] || breakdown[0];

    // Utiliser la description de recommandation ou la g√©n√©rer
    let finalDescription = parsedResponse.recommendationDescription;
    
    if (!finalDescription) {
      finalDescription = await generateRecommendationDescription(winner, breakdown, dilemma);
    }

    const result = {
      recommendation: winner.option,
      description: finalDescription,
      breakdown,
      resultType: 'comparative' as const,
      aiProvider: {
        provider,
        model: provider === 'claude' ? 'claude-sonnet-4-20250514' : 'gpt-4o-mini',
        success: true
      },
      dataFreshness: 'fresh' as const
    };

    // Am√©liorer la description si elle est toujours g√©n√©rique
    const improvedDescription = await improveDescription(
      result.description,
      dilemma,
      result
    );
    
    return {
      ...result,
      description: improvedDescription
    };
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©ration comparative:', error);
    throw error;
  }
};

// Service principal optimis√©
export const generateOptimizedDecision = async (
  dilemma: string,
  criteria: ICriterion[],
  files?: UploadedFileInfo[],
  workspaceId?: string,
  forcedType?: 'factual' | 'comparative' | 'simple-choice'
): Promise<IResult> => {
  try {
    const questionType = forcedType ?? detectQuestionType(dilemma);
    
    console.log(`üéØ Type de question utilis√©: ${questionType}${forcedType ? ' (forc√©)' : ''}`);
    
    if (questionType === 'factual') {
      return await generateFactualAnswerWithPerplexity(dilemma, files, workspaceId);
    } else {
      return await generateComparativeWithOpenAI(dilemma, criteria, files, workspaceId);
    }
  } catch (error) {
    console.error('‚ùå Erreur service optimis√©:', error);
    throw error;
  }
};